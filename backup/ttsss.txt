// 크롤러 인터페이스 import
import { Crawler, SearchResult } from './crawlers';
import { generateObject } from 'ai';
import { compact } from 'lodash-es';
import pLimit from 'p-limit';
import { z } from 'zod';
import * as path from 'path';
import * as fs from 'node:fs/promises';

import { getModel, trimPrompt } from './ai/providers';
import { systemPrompt } from './prompt';

function log(...args: any[]) {
  console.log(...args);
}

export type ResearchProgress = {
  currentDepth: number;
  totalDepth: number;
  currentBreadth: number;
  totalBreadth: number;
  currentQuery?: string;
  totalQueries: number;
  completedQueries: number;
};

export type ResearchResult = {
  learnings: string[];
  visitedUrls: string[];
};

// increase this if you have higher API rate limits
const ConcurrencyLimit = Number(process.env.CRAWLER_CONCURRENCY) || 2;

// 크롤러 타입 (환경 변수에서 가져오거나 기본값 사용)
const crawlerType = process.env.CRAWLER_TYPE || 'crawl4ai';

// 디버그 로그 추가
console.log('크롤러 초기화 정보:');
console.log('크롤러 타입:', crawlerType);

// 크롤러 인스턴스 (lazy loading)
let crawlerInstance: Crawler | null = null;

// 크롤러 인스턴스 가져오기
async function getCrawlerInstance(): Promise<Crawler> {
  if (!crawlerInstance) {
    const { getCrawler } = await import('./crawlers');
    crawlerInstance = await getCrawler(crawlerType as any);
  }
  return crawlerInstance;
}

// take en user query, return a list of SERP queries, 일단 numqueries는 3개에서 변경함. 
export async function generateSerpQueries({
  query,
  numQueries = 2,
  learnings,
  useDimensions = true,
  parentDimension, // 디멘션 사용 여부 (1차 검색에서는 true, 2차 검색에서는 false)
}: {
  query: string;
  numQueries?: number;
  // optional, if provided, the research will continue from the last learning
  learnings?: string[];
  useDimensions?: boolean;
  parentDimension?: string;
}) {
  const res = await generateObject({
    model: getModel(),
    system: systemPrompt(),
    prompt: `Given the user query, extract key concepts and generate simple, broad search queries that cover the topic comprehensively. 
User Query: ${query}
Parent Dimension: ${parentDimension}

Step 1 — Determine the search mode:
- If **parentDimension is not provided** or is null/empty, you are performing a **first-level strategic scan**. Proceed to generate **6 queries**, each aligned with one of the strategic dimensions listed below.
- If **parentDimension is provided**, you are performing a **second-level deep dive** focused on that specific dimension. Proceed to generate follow-up queries only for that dimension.

${!parentDimension || parentDimension === "" ? 
  // ===== First-Level Search =====
  `You are conducting a first-level search to explore the user's topic across six key strategic dimensions.

Generate 6 search queries in English — one for each of the following dimensions:

1. **Market Analysis & Demand Drivers**
2. **Competitive Landscape & Differentiators**
3. **Business Impact & ROI Evidence**
4. **Core Technology & Architecture**
5. **Implementation & Adoption Strategy**
6. **Risk Assessment & Mitigation**

Each query should be:
- Simple (3–7 words)
- Broad yet relevant to the user’s topic
- Avoid redundancy by generating follow-up questions that explore new angles or uncovered areas, without repeating existing topics.
- Focused on the strategic intent of each dimension`
:
  // ===== Second-Level Search =====
  `You are conducting a second-level search focused on the following dimension: **${parentDimension}**

Generate ${numQueries} follow-up search queries in English (3–7 words) that:
- Deepen the investigation specifically Focused on the "${parentDimension}" dimension
- Explore diverse subtopics or questions relevant to that angle
- Avoid redundancy by generating follow-up questions that explore new angles or uncovered areas, without repeating existing topics.
- Are informed by both the user’s original query and the strategic intent of the dimension`
}

${learnings ? 
  `\nPrevious research context:\n${learnings.slice(0, 2).join('\n\n')}\n\nBased on this context, generate queries that explore gaps or expand on key findings.` 
  : ''
}`,
    schema: z.object({
      queries: useDimensions 
        ? z.array(
            z.object({
              dimension: z.enum([
                "Market Analysis & Demand Drivers",
                "Competitive Landscape & Differentiators",
                "Business Impact & ROI Evidence",
                "Core Technology & Architecture",
                "Implementation & Adoption Strategy",
                "Risk Assessment & Mitigation"
              ]).describe("The strategic dimension this query focuses on."),
              query: z.string().describe('Simple, broad search query (3-7 words, covering key aspects of the topic).'),
              researchGoal: z
                .string()
                .describe(
                  'Brief goal of this research query and what insights we expect to find.',
                ),
            })
          )
          .length(6) // 1차 검색: 5가지 디멘션 강제
          .describe(`List of 5 simple, broad SERP queries covering different strategic aspects.`)
        : z.array( // 2차 검색: dimension 필드 완전 제거
            z.object({
              query: z.string().describe('Simple follow-up search query (3-7 words).'),
              researchGoal: z.string().describe('Brief goal of this follow-up research.'),
            })
          )
          .min(1)
          .max(numQueries)
          .describe(`List of simple follow-up queries for deeper research.`),
    }),
  });
  log(`Created ${res.object.queries.length} queries`, res.object.queries);

  return res.object.queries.slice(0, numQueries);
}
// numLearnings, Fup Questions 는 2개로 변경
export async function processSerpResult({
  query,
  result,
  numLearnings = 2,
  numFollowUpQuestions = 2,
}: {
  query: string;
  result: SearchResult;
  numLearnings?: number;
  numFollowUpQuestions?: number;
}) {
  // 1. 검색 결과(markdown) 추출
  const contents = compact(result.data.map(item => item.markdown));
  log(`Ran ${query}, found ${contents.length} contents`);
  
  // 문서가 없는 경우 빈 결과 반환
  if (contents.length === 0) {
    log(`No contents found for query: ${query}`);
    return {
      learnings: [],
      followUpQuestions: [],
    };
  }

  // 2. 각 문서별 개별 요약 생성
  log(`Generating individual summaries for ${contents.length} documents...`);
  const learningsPerDoc = await Promise.all(
    contents.map(async (content, index) => {
      try {
        // 각 문서 내용 길이 제한 (원래보다 더 많이 허용)
        const trimmedContent = trimPrompt(content, 40_000);
        
        // 개별 문서에 대한 요약 생성
        const docRes = await generateObject({
          model: getModel(),
          abortSignal: AbortSignal.timeout(30_000), // 개별 문서는 시간 단축
          system: systemPrompt(),
          prompt: `Given the following content from a search result for the query "${query}", generate at least more than 10 key learnings from this specific document. Make the learnings precise, detailed and information-dense. Include any entities, metrics, numbers, or dates.

<content>
${trimmedContent}
</content>`,
          schema: z.object({
            documentLearnings: z.array(z.string()).describe('key learnings from this document'),
          }),
        });
        
        log(`Document ${index + 1}: Generated ${docRes.object.documentLearnings.length} learnings`);
        return docRes.object.documentLearnings;
      } catch (error) {
        log(`Error processing document ${index + 1}:`, error);
        return []; // 오류 발생 시 빈 배열 반환하여 계속 진행
      }
    }),
  );

  // 3. 모든 개별 요약 통합 (평면화)
  const allDocumentLearnings = learningsPerDoc.flat();
  log(`Total individual learnings generated: ${allDocumentLearnings.length}`);

  // 4. 전체 통합 요약 생성 (줄글 형식)
  const res = await generateObject({
    model: getModel(),
    abortSignal: AbortSignal.timeout(90_000), // 상세한 작성을 위해 타임아웃 증가
    system: systemPrompt(),
    prompt: trimPrompt(
      `주어진 개별 학습 내용 목록(<individual_learnings>)을 바탕으로, 검색어 "${query}"에 대한 포괄적이고 상세한 서술형 내용 정리문을 영문 검색결과 그대로 작성해 주십시오.\n\n당신의 목표는 다음과 같습니다:\n1. 모든 개별 정보를 종합하여 하나의 일관된 흐름을 가진 글로 재구성합니다.\n2. 원본 정보의 세부 사항, 뉘앙스, 전문 용어, 통계, 예시 등을 최대한 보존하며, 자료 재정리를 넘어 깊이 있는 분석을 제공해야 합니다.\n3. 내용을 논리적으로 연결되는 단락으로 구성하되, 각 단락마다 적절한 소주제(## 헤더)를 추가하여 구조화된 마크다운 형식으로 작성합니다.\n4. 최종 결과물은 그 자체로 완결된 하나의 작은 보고서처럼 읽혀야 하며, 가능하면 1000단어 이상으로 풍부한 내용을 담아야 합니다.\n5. 소주제는 해당 단락의 핵심 내용을 간결하게 요약하되, 분석적 표현보다는 정보의 성격을 나타내는 중립적 제목을 사용합니다.\n\n요약문 작성 후, 최종 보고서 완성 목표를 고려하여 이 주제에 대해 더 깊이 탐구할 수 있는 ${numFollowUpQuestions}개의 후속 질문도 생성해 주십시오.\n\n<individual_learnings>\n${allDocumentLearnings.map(learning => `- ${learning}`).join('\n')}\n</individual_learnings>`,
    ),
    schema: z.object({
      detailedSummary: z.string().describe('A detailed, structured summary in Korean with appropriate section headers (## format). Each section should contain comprehensive narrative content while preserving original information details.'),
      followUpQuestions: z
        .array(z.string())
        .describe(
          `List of follow-up questions to research the topic further, max of ${numFollowUpQuestions}`,
        ),
    }),
  });

  // 생성된 상세 요약문을 배열에 담아 기존 구조와 호환되도록 함
  const learnings = [res.object.detailedSummary];
  log(`Created a detailed summary and ${res.object.followUpQuestions.length} questions`);
  
  return {
    learnings,
    followUpQuestions: res.object.followUpQuestions,
  };
}

export async function writeFinalReport({
  prompt,
  learnings,
  visitedUrls,
}: {
  prompt: string;
  learnings: string[];
  visitedUrls: string[];
}) {
  const learningsString = learnings
    .map(learning => `<learning>\n${learning}\n</learning>`)
    .join('\n');

  const res = await generateObject({
    model: getModel(),
    system: systemPrompt(),
    prompt: trimPrompt(
      `사용자의 초기 질문 <prompt>${prompt}</prompt>과 이전 연구에서 얻은 모든 학습 내용 <learnings>\n${learningsString}\n</learnings>을 바탕으로, 주제에 대한 심층 기술 전략 보고서를 한국어로 작성하십시오.

You are an AI Research Agent assigned to prepare an in-depth, structured report to support high-level business decision-making for a specific IT solution.

The report must be comprehensive, evidence-based, and reflect all relevant research findings. It should include a minimum of 15 pages of detailed content, organized under the following sections:

1. Executive Summary & Key Findings
2. Market Analysis (size, growth, key trends, opportunities and risks)
3. Technology Analysis (core technologies, maturity levels, future directions)
4. Competitive Landscape (key players, strengths/weaknesses, differentiation)
5. Implementation & Adoption (staged approach, key considerations)
6. Known Risks & Mitigation References


Strictly follow these writing guidelines for every section:
- Use Markdown headings for each main section
- Each Sub-sections should include at least 2–3 full paragraphs.
- Each section should contain at least 4–5 detailed paragraphs.
- Each paragraph must have written in well-formed sentences.
- Provide concrete explanations and deep analysis, not surface-level summaries.
- Include quantitative data, statistics, industry examples, and use structured elements like tables and bullet lists where appropriate
- Especially in the Competitive Landscape section, provide in-depth individual profiles of leading companies
- In the Roadmap section, develop clear short-/mid-/long-term execution plans (not just listing facts)

All information must be synthesized into original insight—not copied or paraphrased. Avoid bullet-style or brief summaries as the main format. Every section must contain rich explanation and thoughtful discussion.
**Please write your response in Korean.**
`,
    ),
    schema: z.object({
      reportMarkdown: z.string().describe('Comprehensive, detailed strategic report on the topic in Markdown format with extensive analysis and insights'),
    }),
  });

  // Append the visited URLs section to the report
  const urlsSection = `\n\n## Sources\n\n${visitedUrls.map(url => `- ${url}`).join('\n')}`;
  return res.object.reportMarkdown + urlsSection;
}

export async function writeFinalAnswer({
  prompt,
  learnings,
}: {
  prompt: string;
  learnings: string[];
}) {
  const learningsString = learnings
    .map(learning => `<learning>\n${learning}\n</learning>`)
    .join('\n');

  const res = await generateObject({
    model: getModel(),
    system: systemPrompt(),
    prompt: trimPrompt(
      `Given the following prompt from the user, write a final answer on the topic using the learnings from research. Follow the format specified in the prompt. Do not yap or babble or include any other text than the answer besides the format specified in the prompt. Keep the answer as concise as possible - usually it should be just a few words or maximum a sentence. Try to follow the format specified in the prompt (for example, if the prompt is using Latex, the answer should be in Latex. If the prompt gives multiple answer choices, the answer should be one of the choices).\n\n<prompt>${prompt}</prompt>\n\nHere are all the learnings from research on the topic that you can use to help answer the prompt:\n\n<learnings>\n${learningsString}\n</learnings>`,
    ),
    schema: z.object({
      exactAnswer: z
        .string()
        .describe('The final answer, make it short and concise, just the answer, no other text'),
    }),
  });

  return res.object.exactAnswer;
}

export async function deepResearch({
  solutionContext, // 이 부분이 solutionContext로 사용됨
  query, // 이 부분이 initialQuery로 사용됨
  breadth,
  depth,
  learnings = [], // 이전 depth에서 누적된 learnings
  visitedUrls = [], // 이전 depth에서 누적된 visitedUrls
  onProgress,
  initialQuery, // 최초 사용자 쿼리 보존용
  originalDepth, // 최초 depth 값 보존용
  parentDimension, // 1차 검색의 디멘션 정보
}: {
  solutionContext?: string;
  query: string;
  breadth: number;
  depth: number;
  learnings?: string[];
  visitedUrls?: string[];
  onProgress?: (progress: ResearchProgress) => void;
  initialQuery?: string; // 최초 사용자 쿼리 보존용
  originalDepth?: number; // 최초 depth 값 보존용
  parentDimension?: string; // 1차 검색의 디멘션 정보
}): Promise<ResearchResult> {
  // originalDepth가 없으면 현재 depth를 최초 depth로 설정
  const maxDepth = originalDepth || depth;
  
  const progress: ResearchProgress = {
    currentDepth: depth,
    totalDepth: maxDepth, // 최초 depth 값 사용
    currentBreadth: breadth,
    totalBreadth: breadth,
    totalQueries: 0,
    completedQueries: 0,
  };

  const reportProgress = (update: Partial<ResearchProgress>) => {
    Object.assign(progress, update);
    onProgress?.(progress);
  };

  // 1차 검색은 useDimensions: true, 2차 검색(depth < maxDepth)은 useDimensions: false
  const isInitialSearch = depth === maxDepth;
  
  const serpQueries = await generateSerpQueries({
    query,
    learnings,
    numQueries: breadth,
    useDimensions: isInitialSearch, // 2차 검색부터는 디멘션 사용 안 함
  });

  reportProgress({
    totalQueries: serpQueries.length,
    currentQuery: serpQueries[0]?.query,
  });

  const limit = pLimit(ConcurrencyLimit);

  // 하위 보고서 저장 디렉토리 생성 로직 추가
  // 최초 사용자 쿼리를 사용하여 폴더명 생성 (재귀 호출 시에도 동일한 폴더 사용)
  const queryForFolder = initialQuery || query;
  let safeInitialQuery = queryForFolder.replace(/[\/\?%\*:\|"<>\.]/g, '').replace(/\s+/g, '_');
  // Windows의 MAX_PATH 오류를 방지하기 위해 디렉토리 이름 부분의 최대 길이를 제한합니다.
  // MAX_PATH는 약 260자이며, 기본 경로, 'report', '<검색어>', 'Middle', 일반적인 파일 이름을 제외하면
  // 이 부분에 약 150자 정도를 사용할 수 있습니다.
  const MAX_DIR_PART_LENGTH = 100;
  if (safeInitialQuery.length > MAX_DIR_PART_LENGTH) {
    safeInitialQuery = safeInitialQuery.substring(0, MAX_DIR_PART_LENGTH);
    // 잘라낸 후 마지막에 남아있을 수 있는 '_' 문자들을 제거합니다.
    safeInitialQuery = safeInitialQuery.replace(/_+$/, '');
  }
  
  const getFolderName = (currentDepth: number, maxDepth: number) => {
    if (currentDepth === maxDepth) {
      return 'Middle'; // 1차 검색 (최초 depth)
    } else {
      const followUpLevel = maxDepth - currentDepth;
      return `FollowUp_${followUpLevel}`; // 2차: FollowUp_1, 3차: FollowUp_2, ...
    }
  };
  
  const folderName = getFolderName(depth, maxDepth);
  const subReportDir = path.join('report', safeInitialQuery, folderName);
  await fs.mkdir(subReportDir, { recursive: true });

  const results = await Promise.all(
    serpQueries.map(serpQuery =>
      limit(async () => {
        try {
          const crawler = await getCrawlerInstance();
          const crawlerType = process.env.CRAWLER_TYPE || 'perplexity';

          let result: SearchResult;
          if (crawlerType === 'perplexity') {
            // Perplexity는 search가 모든 것을 처리
            result = await crawler.search(serpQuery.query);
          } else {
            // 기존 크롤러들은 search 후 crawl 필요
            result = await crawler.search(serpQuery.query, {
              timeout: 30000, // 타임아웃 시간 증가
              limit: 10, // 검색 결과 개수 증가
              scrapeOptions: { 
                formats: ['markdown'], 
                maxTokens: 100000, // 페이지당 최대 토큰 수 증가
              },
            });
          }

          // Collect URLs from this search
          const newUrls = compact(result.data.map(item => item.url));
          // breadth 계산 원래대로 유지 (2차 검색도 breadth 값 사용)
          const newBreadth = Math.ceil(breadth / 3);
          const newDepth = depth - 1;

          const newLearnings = await processSerpResult({
            // 기존 processSerpResult 호출 부분 유지
            query: serpQuery.query,
            result,
            numLearnings: 10, // 기본값 5에서 10으로 증가 (내용 보존을 위해)
            numFollowUpQuestions: newBreadth,
          });
          const allLearnings = [...learnings, ...newLearnings.learnings];
          const allUrls = [...visitedUrls, ...newUrls];

          // 하위 주제 결과 파일 저장 로직 추가
          if (newLearnings.learnings.length > 0) {
            // 1차 검색인지 확인 (originalDepth와 현재 depth 비교)
            const isInitialSearch = depth === (originalDepth || depth);
            
            // 디버깅 로그 추가
            if ('dimension' in serpQuery && serpQuery.dimension === 'Core Technology & Architecture') {
              console.log('\n=== CoreTechnologyArchitecture 디버깅 ===');
              console.log('followUpQuestions:', newLearnings.followUpQuestions);
              console.log('learnings length:', newLearnings.learnings.length);
              console.log('newDepth:', newDepth);
              console.log('newBreadth:', newBreadth);
            }
            
            // 파일명 생성 로직 개선: 디멘션 기반 고유 파일명
            let fileNamePrefix: string;
            
            if (isInitialSearch && 'dimension' in serpQuery && typeof serpQuery.dimension === 'string') {
              // 1차 검색: 디멘션 기반 파일명
              fileNamePrefix = serpQuery.dimension.replace(/[^a-zA-Z0-9_\-가-힣]/g, '').replace(/\s+/g, '_');
            } else if (parentDimension) {
              // 2차 검색: 부모 디멘션 + 인덱스 기반 파일명
              const dimensionSlug = parentDimension.replace(/[^a-zA-Z0-9_\-가-힣]/g, '').replace(/\s+/g, '_');
              // 간단한 인덱스 생성 (현재 시간 기반으로 고유성 보장)
              const timeIndex = Date.now().toString().slice(-4);
              const queryIndex = progress.completedQueries + 1;
              fileNamePrefix = `${dimensionSlug}_${queryIndex}_${timeIndex}`;
            } else {
              // 기본 fallback
              fileNamePrefix = `Query_${progress.completedQueries + 1}`;
            }
            
            const subReportFileName = `${fileNamePrefix}.md`;
            const subReportFilePath = path.join(subReportDir, subReportFileName);
            try {
              await fs.writeFile(subReportFilePath, newLearnings.learnings.join('\n\n---\n\n'), 'utf-8');
              log(`Sub-report saved: ${subReportFilePath}`);
            } catch (writeError) {
              console.error(`Error writing sub-report ${subReportFilePath}:`, writeError);
            }
          }

          if (newDepth > 0) {
            log(`Researching deeper, breadth: ${newBreadth}, depth: ${newDepth}`);

            reportProgress({
              currentDepth: newDepth,
              currentBreadth: newBreadth,
              completedQueries: progress.completedQueries + 1,
              currentQuery: serpQuery.query,
            });

            const nextQuery = `
            Previous research goal: ${serpQuery.researchGoal}
            Follow-up research directions: ${newLearnings.followUpQuestions.map(q => `\n${q}`).join('')}
          `.trim();

            return await deepResearch({
              query: nextQuery,
              breadth: Math.ceil(breadth / 2),
              depth: depth - 1,
              learnings: allLearnings,
              visitedUrls: allUrls,
              onProgress,
              solutionContext, // 누락되지 않도록 solutionContext 전달
              initialQuery: initialQuery || query, // 최초 사용자 쿼리 전달
              originalDepth: maxDepth, // 최초 depth 값 전달
              parentDimension: parentDimension || 
                ('dimension' in serpQuery && typeof serpQuery.dimension === 'string' 
                  ? serpQuery.dimension 
                  : undefined), // 상위 디멘션이 있으면 유지, 없으면 serpQuery.dimension 사용
            });
          } else {
            reportProgress({
              currentDepth: 0,
              completedQueries: progress.completedQueries + 1,
              currentQuery: serpQuery.query,
            });
            return {
              learnings: allLearnings,
              visitedUrls: allUrls,
            };
          }
        } catch (e: any) {
          console.error(`[CASCADE DEBUG] Full error for query "${serpQuery.query}":`, JSON.stringify(e, null, 2));
          if (e.message && e.message.includes('Timeout')) {
            log(`Timeout error running query: ${serpQuery.query}: `, e);
          } else {
            log(`Error running query: ${serpQuery.query}: `, e);
          }
          return {
            learnings: [],
            visitedUrls: [],
          };
        }
      }),
    ),
  );

  return {
    learnings: [...new Set(results.flatMap(r => r.learnings))],
    visitedUrls: [...new Set(results.flatMap(r => r.visitedUrls))],
  };
}



    1. Solution Overview & Unmet Needs
    1-1.Global and regional TAM/SAM with CAGR figures
    1-2.Demand variation by industry, customer size, or geography
    1-3.Key growth drivers and inhibitors shaping adoption

    2. Competitive Landscape & Strategic Differentiators
    2-1.Feature-price-customer matrix for leading competitors
    2-2.Positioning map of substitute technologies and platforms
    2-3.Funding, M&A, and partnership trends among rivals

    3. Technology Trends & Feasibility Assessment
    3-1.Top emerging technology trends and illustrative use cases
    3-2.Performance and scalability benchmarks (latency, accuracy, throughput)
    3-3.Maturity of open-source projects / standards and implementation complexity

    4. Regulatory & Risk Snapshot
    4-1.Summary of major global and local data-/AI-related regulations
    4-2.Sector-specific compliance, security, and certification requirements
    4-3.Forthcoming regulatory changes and enforcement timelines

    5. Business Impact & ROI Potential
    5-1.Pre- vs. post-implementation cost-saving and productivity evidence
    5-2.Key metrics from independent ROI / TEI studies
    5-3.Valuation multiples (EV/Revenue, etc.) from comparable companies